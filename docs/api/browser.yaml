name: Browser
component: gui
header: nativeui/browser.h
type: refcounted
namespace: nu
inherit: View
description: Native webview using system browser.
detail: |
  Using `Browser` requires relatively new operating systems, for macOS the
  minimum version required is 10.10, for Linux it is required to install the
  `webkit2gtk` library with at least version 2.8.

  On Windows the latest version of IE installed would be used by default.

  On Linux due to poor support of hardware acceleration, the browser may fail to
  show anything, in that case you may want to disable hardware acceleration.

  ## WebView2 support

  On Windows there is support for using
  [WebView2](https://docs.microsoft.com/en-us/microsoft-edge/webview2/) as
  browser backend, to enable it, you need to:

  1. Set the `<!name>webview2_support` option to `true`.
  2. Ship the `WebView2Loader.dll` file together with your program.
  3. Have users install Edge Beta/Dev/Canary or
  [WebView2 Runtime](https://docs.microsoft.com/en-us/microsoft-edge/webview2/concepts/distribution)
  on their machines.

  There are also a few things to notice:
  1. When WebView2 failed to initialize for any reason, the browser will
  fallback to use IE as backend quietly.
  2. If you don't use WebView2, it is safe to remove the `WebView2Loader.dll`
  file.
  3. WebView2 can not use stable channels of Edge, it will search channels in
  the order of WebView2 Runtime, Beta, Dev, and Canary.
  4. Some `Browser` APIs are not implemented with WebView2 backend, due to lack
  of APIs in WebView2.

constructors:
  - signature: Browser(const Browser::Options& options)
    lang: ['cpp']
    description: Create a new browser view.

class_methods:
  - signature: Browser* Create(Browser::Options options)
    lang: ['lua', 'js']
    description: Create a new browser view.

  - signature: bool RegisterProtocol(const std::string& scheme, std::function<ProtocolJob*(std::string)> handler)
    description: Register a custom protocol with `scheme` and `handler`.
    detail: |
      When the browser sends a request with `scheme`, the `handler` will be
      called with `handler(url)`, and the `handler` must return an instance of
      class that inherits from `<!type>ProtocolJob`.

      The `handler` is guaranteed to be called in the main thread.

      On Windows with WebView2 backend, this method must be called before
      creating the Browser view.

  - signature: void UnregisterProtocol(const std::string& scheme);
    description: Unregister the custom protocol with `scheme`.

class_properties:
  - property: const char* kClassName
    lang: ['cpp']
    description: The class name of this view.

methods:
  - signature: void LoadURL(const std::string& url)
    description: Load the URL.

  - signature: void LoadHTML(const std::string& html, const std::string& baseurl)
    description: Set the webpage contents and base URL.
    detail: On Windows with WebView2 backend, `baseurl` is not respected.
    parameters:
      html:
        description: The string to use as the contents of the webpage.
      baseurl:
        description: A URL used to resolve relative URLs within the document.

  - signature: std::string GetURL()
    description: Return current URL.

  - signature: std::string GetTitle()
    description: Return the title of document.

  - signature: void SetUserAgent(const std::string& user_agent)
    description: Change browser's user agent.
    detail: |
      On Windows, due to Internet Explorer's limitations, calling `SetUserAgent`
      would change all web pages' user agents in current process.

      This API is not supported on Windows with WebView2 backend.

  - signature: bool IsMagnifiable() const
    platform: ['macOS']
    description: Return whether page's magnification can be changed with gestures.

  - signature: void SetMagnifiable(bool magnifiable)
    platform: ['macOS']
    description: Set whether page's magnification can be changed with gestures.

  - signature: void ExecuteJavaScript(const std::string& code, const std::function<void(bool, base::Value)>& callback);
    description: Evaluate `code` in browser and get the evaluated result.
    detail: |
      The `callback` will be called with `callback(success, result)`, the
      `result` argument is a generic value that created from the result of
      `code`.

      Note that due to limitations of system toolkits, the execution may fail if
      the result of execution of `code` can not be fully converted to JSON.

      On Windows with WebView2 backend, the `success` may be true even when
      exception is threw in the executed code.

      On Windows with IE backend, the `code` is executed synchronously and
      the `callback` is called before this API returns.

  - signature: void GetCookiesForURL(const std::string& url, const std::function<void(std::vector<Cookie>)>&& callback)
    description: Receive cookies under `url`.
    detail: |
      This API will include HTTP only cookies.

      This API is not implemented on Windows with IE backend.

  - signature: void GoBack()
    description: Navigate to the back item in the back-forward list.

  - signature: bool CanGoBack() const
    description: |
      Return whether there is a back item in the back-forward list that can be
      navigated to.

  - signature: void GoForward()
    description: Navigate to the forward item in the back-forward list.

  - signature: bool CanGoForward() const
    description: |
      Return whether there is a forward item in the back-forward list that can
      be navigated to.

  - signature: void Reload()
    description: Reload current page.

  - signature: void Stop()
    description: Stop loading all resources on the current page.

  - signature: bool IsLoading() const
    description: Return whether current page is loading content.

  - signature: void SetBindingName(const std::string& name)
    description: Set the `name` of object which would have the native bindings.
    detail: |
      By default native bindings are added to the `window` object, by calling
      this API, native bindings will be added to the `window[name]` object.

  - signature: void AddBinding(const std::string& name, Function func)
    lang: ['lua', 'js']
    description: Add a native binding to web page with `name`.
    detail: |
      The `func` will be called with automatically converted arguments.

  - signature: void AddBinding(const std::string& name, std::function<void(...)> func)
    lang: ['cpp']
    description: Add a native binding to web page with `name`.
    detail: |
      You can pass an arbitrary function as long as the parameters can be
      converted from `base::Value`, otherwise compilation error would happen.

      For example, following native binding:

      ```cpp
      browser->AddBinding("AddRecord", [](std::string key, int value) {
      });
      ```

      accepts following calls:

      ```
      window.addRecord('Books', 4);
      window.addRecord('Videos', 8);
      ```

      You can also use `base::Value` directly to accept arbitrary argument:

      ```cpp
      browser->AddBinding("AddRecord2", [](std::string key, base::Value value) {
      })
      ```

      ```
      window.addRecord2('PI', 3.14);
      window.addRecord2('The Best Animal', 'Panda');
      ```

      Note that only functors, function pointers, `std::function` and
      captureless labmda functions are accepted in `AddBinding`. Labmda
      functions with captures can not have their types deduced automatically, so
      you have to convert them to `std::function` first .

  - signature: void AddRawBinding(const std::string& name, std::function<void(Browser*, base::Value)> func)
    description: Add a raw handler to web page with `name`.
    detail: |
      The `func` will be called with a list of arguments passed from JavaScript.

  - signature: void RemoveBinding(const std::string& name)
    description: Remove the native binding with `name`.

  - signature: void BeginAddingBindings()
    description: |
      Buffer following calls of `<!name>AddBinding` until
      `<!name>EndAddingBindings` is called.
    detail: |
      Adding a native binding is an expensive operation, if you are adding a
      lot of bindings, it is recommended to wrap the `<!name>AddBinding` calls
      between a pair of `<!name>BeginAddingBindings` and `<!name>EndAddingBindings`
      which will buffer the bindings and reduce the cost to minimal.

  - signature: void EndAddingBindings()
    description: Consolidate bindings added.

events:
  - signature: void on_close(Browser* self)
    description: Emitted when the web page requests to close.

  - signature: void on_update_command(Browser* self)
    description: Emitted when the back-forward list has changed.

  - signature: void on_change_loading(Browser* self)
    description: Emitted when the browser starts or stops loading content.

  - signature: void on_update_title(Browser* self, const std::string& title)
    description: Emitted when document's title is changed.

  - signature: void on_start_navigation(Browser* self, const std::string& url)
    description: Emitted when the browser begins provisional navigation.

  - signature: void on_commit_navigation(Browser* self, const std::string& url)
    description: Emitted when the browser begins to receive web content.

  - signature: void on_finish_navigation(Browser* self, const std::string& url)
    description: Emitted when the navigation is complete.

  - signature: void on_fail_navigation(Browser* self, const std::string& url, int code)
    description: Emitted when the navigation fails.
