name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: >-
      ${{
        (matrix.os == 'mac' && matrix.arch == 'arm64') &&
          'macos-15' ||
        (fromJson('{"linux":"ubuntu-22.04","mac":"macos-13","win":"windows-2022"}')[matrix.os])
      }}
    continue-on-error: false

    strategy:
      fail-fast: false
      matrix:
        os: [linux, mac, win]
        arch: [x64, arm64]
        include:
          - os: linux
            arch: x86
          - os: linux
            arch: arm
          - os: win
            arch: x86

    steps:
      - name: Install Edge Canary
        if: matrix.os == 'win'
        shell: pwsh
        run: |
          Start-BitsTransfer -Source 'https://go.microsoft.com/fwlink/?linkid=2084649&Channel=Canary&language=en-us' -Destination EdgeSetup.exe
          if (-not (Test-Path 'EdgeSetup.exe')) {
            Throw 'Failed to download Edge'
          }
          Start-Process -Wait -FilePath './EdgeSetup.exe' -ArgumentList '/silent', '/install'

      - name: Install Linux Dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt update -qq
          sudo apt install -qq cmake libgtk-3-dev libnotify-dev libwebkit2gtk-4.0-dev
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang 100
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Install Linux Cross Compilation Toolchains
        if: matrix.os == 'linux' && matrix.arch != runner.arch
        run: sudo apt install -y gcc-multilib g++-multilib

      - name: Install Linux Arm Toolchains
        if: matrix.os == 'linux' && matrix.arch != runner.arch && startsWith(matrix.arch, 'arm')
        run: sudo apt install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross linux-libc-dev-armhf-cross binutils-aarch64-linux-gnu

      - uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: python -m pip install --upgrade setuptools

      - name: Checkout
        uses: actions/checkout@v4

      - name: Use ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ matrix.os }}-${{ matrix.arch }}

      - name: Build and Test
        env:
          DISPLAY: ':99.0'
        run: node scripts/cibuild.js --target-cpu=${{ matrix.arch }}

      - name: Upload Binary Files
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            out/Dist/lua_yue_*.zip
            out/Dist/napi_yue_*.zip
          retention-days: 1

      - name: Upload Library Files
        if: matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: sources-${{ matrix.os }}
          path: out/Dist/libyue_*.zip
          retention-days: 1

      - name: Upload Document Files
        if: matrix.os == 'linux' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            out/Dist/yue_typescript_declarations_*.zip
            out/Dist/yue_docs_*.zip
          retention-days: 1

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint
        run: node ./scripts/cpplint.js

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, lint]
    runs-on: ubuntu-latest
    permissions:
      # Needed by action-gh-release.
      contents: write

    steps:
      - name: Download Files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          name: Yue ${{ github.ref_name }}
          body: '## Changelog'
          files: '*.zip'
